{"version":3,"sources":["ChatRoom.js","App.js","reportWebVitals.js","index.js"],"names":["Message","data","currentUser","text","uid","photoURL","messageStyle","className","src","alt","ChatRoom","app","useEffect","lastOne","current","scrollIntoView","behavior","firestore","getFirestore","messagesRef","collection","documentReference","doc","answer","query","limit","orderBy","useState","inputValue","setInputValue","useCollectionData","idField","messages","useRef","sendMessage","e","a","preventDefault","setDoc","createdAt","serverTimestamp","map","message","id","ref","onSubmit","type","value","onChange","target","googleAuthProvider","GoogleAuthProvider","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","SignOut","onClick","signOut","then","console","log","SignIn","signInWithPopup","user","App","useAuthState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAsEMA,EAAU,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACZC,EAAwBF,EAAxBE,KAAMC,EAAkBH,EAAlBG,IAAKC,EAAaJ,EAAbI,SAEbC,EAAgBF,IAAQF,EAAYE,IAAO,OAAS,WAE1D,OACI,sBAAKG,UAAS,kBAAaD,GAA3B,UACI,qBAAKE,IAAKH,EAAUI,IAAI,WACxB,4BACKN,QAMFO,EA/EE,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,IAAKT,EAAiB,EAAjBA,YAGpBU,qBAAU,WACNC,EAAQC,QAAQC,eAAe,CAC3BC,SAAU,cAKlB,IAAMC,EAAYC,YAAaP,GACzBQ,EAAcC,YAAWH,EAAU,WAGnCI,EAAoBC,YAAIH,GAGxBI,EAASC,YAAML,EAAaM,YAAM,IAAKC,YAAQ,cAErD,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAmBC,YAAmBP,EAAQ,CAACQ,QAAS,OAAjDC,EAAP,oBAEMnB,EAAUoB,mBAIVC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DAChBD,EAAEE,iBAEMjC,EAAkBF,EAAlBE,IAAKC,EAAaH,EAAbG,SAHG,SAMViC,YAAOjB,EAAmB,CAC5BlB,KAAMyB,EACNW,UAAWC,cACXpC,MACAC,aAVY,OAahBwB,EAAc,IAEdhB,EAAQC,QAAQC,eAAe,CAC3BC,SAAU,WAhBE,2CAAH,sDAoBjB,OACI,qCACI,iCACKgB,GAAYA,EAASS,KAAI,SAAAC,GAAO,OAAI,cAAC,EAAD,CAA0BzC,KAAMyC,EAASxC,YAAaA,GAAxCwC,EAAQC,OAC3D,qBAAKC,IAAK/B,OAGd,uBAAMgC,SAAWX,EAAjB,UACI,uBAAOY,KAAK,OAAOC,MAAOnB,EAAYoB,SAAU,SAACb,GAAD,OAAMN,EAAcM,EAAEc,OAAOF,UAE7E,wBAAQD,KAAK,SAAb,SAAuB,cCpDjCI,EAAqB,IAAIC,IAEzBxC,EAAMyC,YAAc,CACxBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAGHC,EAAOC,YAAQjD,GAoBrB,SAASkD,IAQP,OACE,wBAAQC,QARY,WACpBH,EAAKI,UACJC,MAAK,WACJC,QAAQC,IAAI,gBAKd,qBAIJ,SAASC,IAQP,OACE,wBAAQL,QARe,WACvBM,YAAgBT,EAAMT,GACrBc,MAAK,SAACjB,GACLkB,QAAQC,IAAInB,EAAMsB,UAKpB,iCAIWC,MA5Cf,WAEE,MAAeC,YAAaZ,GAArBU,EAAP,oBAEA,OACE,sBAAK9D,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACI8D,GAAQ,cAACR,EAAD,IACV,0BAGF,kCACGQ,EAAO,cAAC,EAAD,CAAU1D,IAAKA,EAAKT,YAAamE,IAAW,cAACF,EAAD,UCxB7CK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.40c53694.chunk.js","sourcesContent":["import { getFirestore, collection, doc, query, limit, serverTimestamp, setDoc, orderBy } from '@firebase/firestore'\r\nimport React, { useRef, useState, useEffect } from 'react'\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\n\r\n\r\n\r\nconst ChatRoom = ({app, currentUser}) => {\r\n\r\n\r\n    useEffect(() => {\r\n        lastOne.current.scrollIntoView({\r\n            behavior: 'smooth'\r\n        })\r\n        \r\n    })\r\n\r\n    const firestore = getFirestore(app);\r\n    const messagesRef = collection(firestore,'testing');    \r\n\r\n    \r\n    const documentReference = doc(messagesRef)    \r\n    \r\n\r\n    const answer = query(messagesRef, limit(25), orderBy('createdAt'));\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const [messages] = useCollectionData (answer, {idField: 'id'});\r\n\r\n    const lastOne = useRef()\r\n\r\n\r\n\r\n    const sendMessage = async (e)=>{\r\n        e.preventDefault();\r\n\r\n        const { uid, photoURL } = currentUser;\r\n        \r\n\r\n        await setDoc(documentReference, {\r\n            text: inputValue,\r\n            createdAt: serverTimestamp(),\r\n            uid,\r\n            photoURL\r\n        })\r\n\r\n        setInputValue('');\r\n\r\n        lastOne.current.scrollIntoView({\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <main>\r\n                {messages && messages.map(message => <Message key={message.id} data={message} currentUser={currentUser}/>)}\r\n                <div ref={lastOne}></div>\r\n            </main>\r\n\r\n            <form onSubmit={(sendMessage)}>\r\n                <input type=\"text\" value={inputValue} onChange={(e)=> setInputValue(e.target.value)}/>\r\n\r\n                <button type=\"submit\">{'=>'}</button>\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Message = ({data, currentUser})=>{\r\n    const { text, uid, photoURL } = data;\r\n\r\n    const messageStyle = (uid === currentUser.uid) ? 'sent' : 'received';\r\n\r\n    return (\r\n        <div className={`message ${messageStyle}`}>\r\n            <img src={photoURL} alt='sender'/>\r\n            <p>\r\n                {text}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom\r\n","import './App.css';\n\nimport { initializeApp } from 'firebase/app';\nimport 'firebase/firestore';\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport ChatRoom from './ChatRoom';\n\n\n\nconst googleAuthProvider = new GoogleAuthProvider();\n\nconst app = initializeApp({\n  apiKey: \"AIzaSyCdG-ELH84hYImRKZ4MiGxScred7g2Bi8I\",\n  authDomain: \"fir-try-a9c75.firebaseapp.com\",\n  projectId: \"fir-try-a9c75\",\n  storageBucket: \"fir-try-a9c75.appspot.com\",\n  messagingSenderId: \"407189812932\",\n  appId: \"1:407189812932:web:13dc8d988e0494ad76bb91\"\n})\n\nconst auth = getAuth(app)\n\nfunction App() {\n\n  const [user] = useAuthState(auth)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {(user && <SignOut />)}\n        <br />        \n      </header>\n\n      <section>\n        {user ? <ChatRoom app={app} currentUser={user} /> : <SignIn />}        \n      </section>\n    </div>\n  );\n}\n\nfunction SignOut(){\n  const handleSignOut = ()=>{\n    auth.signOut()\n    .then(()=>{\n      console.log(\"Sign out\");\n    })\n  }\n\n  return (\n    <button onClick={handleSignOut}>Log Out</button>\n  )\n}\n\nfunction SignIn() {\n  const signInWithGoogle = ()=>{\n    signInWithPopup(auth, googleAuthProvider)\n    .then((value)=>{\n      console.log(value.user)\n    })    \n\n  }\n  return (    \n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}